# coding:shift-JIS
# pylint: disable=F0401

import pymel.core as pm
import maya.api.OpenMaya as om2

import sys
import json

myfanc_path = "C:/Users/piedp/OneDrive/Labo/Sketch/Script/BlendLap/myfanc"
if not myfanc_path in sys.path :
    sys.path.append( myfanc_path )

import tools
reload (tools)

world = om2.MSpace.kWorld


# ---- ??ｿｽ?ｿｽﾟ傍??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽA??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽX??ｿｽ?ｿｽg??ｿｽ?ｿｽﾆゑｿｽ??ｿｽ?ｿｽﾄ返ゑｿｽ??ｿｽ?ｿｽB??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽX??ｿｽ?ｿｽg??ｿｽ?ｿｽﾍ最擾ｿｽ??ｿｽ?ｿｽﾌ抵ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾌ具ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾅ階??ｿｽ?ｿｽw??ｿｽ?ｿｽ??ｿｽ?ｿｽ ----
def serch_close_vertex( obj_name, pinIndexList, connectionLength) :
    print "\n - - - serch_close_vertex - - -"
    area = []
    area.append(pinIndexList)
    
    dagPath = tools.getDagPath(obj_name)
    mitMeshVertIns  = om2.MItMeshVertex(dagPath)
    print "serch range        :",connectionLength
    
    for d in range(connectionLength) :
        area.append([])
        for i in area[d] :
            mitMeshVertIns.setIndex(i)
            connectList = mitMeshVertIns.getConnectedVertices()
            
            for p in connectList :
                tr = 0
                for q in range(0,d+2) :
                    if p in area[q] :
                        tr = 1
                if tr == 0 :
                    area[d+1].append(p)
    
    # ??ｿｽ?ｿｽ??ｿｽ?ｿｽO??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽF??ｿｽ?ｿｽﾅ外??ｿｽ?ｿｽk??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽﾉつゑｿｽ??ｿｽ?ｿｽﾄ、??ｿｽ?ｿｽ??ｿｽ?ｿｽﾂの抵ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽﾆゑｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾚ托ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾈゑｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾜゑｿｽ??ｿｽ?ｿｽB??ｿｽ?ｿｽﾌでとりあ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾌみゑｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽO(??ｿｽ?ｿｽﾄ外??ｿｽ?ｿｽk??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽs??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾅなゑｿｽ??ｿｽ?ｿｽﾈゑｿｽ)
    for p in area[connectionLength][:] :
        mitMeshVertIns.setIndex(p)
        connectList = mitMeshVertIns.getConnectedVertices()
        
        count = 0
        for i in connectList :
            if i in area[connectionLength-1] or i in area[connectionLength] :
                count += 1
        if count == 1 :
            area[connectionLength].remove(p)
                
                
    return area
    
    
# ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾌエ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽA??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽI??ｿｽ?ｿｽu??ｿｽ?ｿｽW??ｿｽ?ｿｽF??ｿｽ?ｿｽN??ｿｽ?ｿｽg??ｿｽ?ｿｽﾆゑｿｽ??ｿｽ?ｿｽﾄ認??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾄ擾ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽo??ｿｽ?ｿｽ??ｿｽ?ｿｽ
def exp_vertex_pos_limit(name, path, area) :
    print "\n - - - exp_vertex_pos_limit - - -"
    dagPath = tools.getDagPath(name)
    #------ ??ｿｽ?ｿｽS??ｿｽ?ｿｽﾄの抵ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽﾌデ??ｿｽ?ｿｽ[??ｿｽ?ｿｽ^??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽo??ｿｽ?ｿｽ??ｿｽ?ｿｽ -------------
    """
     ??ｿｽ?ｿｽd??ｿｽ?ｿｽl ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽL??ｿｽ?ｿｽ[??ｿｽ?ｿｽﾅ難ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾄゑｿｽﾌで趣ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾌ擾ｿｽ??ｿｽ?ｿｽﾔはゑｿｽ??ｿｽ?ｿｽﾌ通ゑｿｽﾅはなゑｿｽ??ｿｽ?ｿｽA??ｿｽ?ｿｽC??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽf??ｿｽ?ｿｽb??ｿｽ?ｿｽN??ｿｽ?ｿｽX??ｿｽ?ｿｽﾅ呼ばなゑｿｽ??ｿｽ?ｿｽ謔､??ｿｽ?ｿｽ??ｿｽ?ｿｽ
     {
         vertex : 
         [
             ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽﾌ搾ｿｽ??ｿｽ?ｿｽW(n x 1) : []
         ]
         connect[]??ｿｽ?ｿｽ@??ｿｽ?ｿｽF               
     }
    """
    #---------------------------------------------------
    area_flat = []
    for area_v in area :
        for area_p in area_v :
            area_flat.append(area_p)
    
    dict         = {}
    #---- ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽﾌイ??ｿｽ?ｿｽe??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ[??ｿｽ?ｿｽ^??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾜわし??ｿｽ?ｿｽA??ｿｽ?ｿｽﾛ托ｿｽ -----
    v_ls    = []
    conn_ls = []
    mitMeshVertIns         = om2.MItMeshVertex(dagPath)    
    mitMeshVertIns.reset()                                   # .reset??ｿｽ?ｿｽﾅ鯉ｿｽ??ｿｽ?ｿｽﾝゑｿｽindex??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾅゑｿｽ??ｿｽ?ｿｽﾜゑｿｽ??ｿｽ?ｿｽB
    for n in area_flat :
        mitMeshVertIns.setIndex(n)
        pos = mitMeshVertIns.position(world)     # <type 'OpenMaya.MPoint'>
        v_ls.append( [pos.x, pos.y, pos.z] )
        
        connectList = mitMeshVertIns.getConnectedVertices()
        # ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾆのイ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽf??ｿｽ?ｿｽb??ｿｽ?ｿｽN??ｿｽ?ｿｽX??ｿｽ?ｿｽ??ｿｽ?ｿｽV??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽC??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽf??ｿｽ?ｿｽb??ｿｽ?ｿｽN??ｿｽ?ｿｽX(0??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽn??ｿｽ?ｿｽﾜゑｿｽ)??ｿｽ?ｿｽﾉ変奇ｿｽ
        new_connectList = []
        for c in connectList :
            if c in area_flat :
                new_index = area_flat.index(c)
                new_connectList.append(new_index)
        
        conn_ls.append(new_connectList)
             
    # ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾉ難ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ
    dict = {}
    dict["vertex"] = v_ls
    dict["connect"] = conn_ls
    
    print "---------------------------------------------", dict
    
    json_file = open(path, 'w')
    json.dump(dict, json_file)    
    json_file.close()


def do_lap_limit(
        area,           # ??ｿｽ?ｿｽv??ｿｽ?ｿｽZ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽG??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽA
        lamda,
        curPosList,
        base_name,
        pin_area_num = 1    # ??ｿｽ?ｿｽﾅ外??ｿｽ?ｿｽk??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ迚ｽ??ｿｽ?ｿｽﾔ目までゑｿｽ??ｿｽ?ｿｽs??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾉゑｿｽ??ｿｽ?ｿｽ驍ｩ
        ) :
    print "\n - - - do_lap_limit - - -"
    print "serch_area          : 0 +", len(area)-1
            
    obj    =  pm.PyNode(base_name)

    area_flat = []
    for area_v in area :
        for area_p in area_v :
            area_flat.append(area_p)
            

    # ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ_??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾜゑｿｽ??ｿｽ?ｿｽJ??ｿｽ?ｿｽ[??ｿｽ?ｿｽu??ｿｽ?ｿｽﾌ位置??ｿｽ?ｿｽﾜで厄ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ闔晢ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾄゑｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ(??ｿｽ?ｿｽﾚ難ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾉ搾ｿｽ??ｿｽ?ｿｽW??ｿｽ?ｿｽ??ｿｽ?ｿｽ?ｿｽVSC??ｿｽ?ｿｽﾉゑｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ黷ｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾈゑｿｽ??ｿｽ?ｿｽ謔ｵ)
    for i in range( len( area[0] ) ) :
        #count = 0
        pm.move(obj.vtx[area[0][i]], curPosList[i][0], curPosList[i][1], curPosList[i][2], a = 1)
        #makeSphere(curPosList[i])
    
    pm.refresh()    #??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ黷ｪ??ｿｽ?ｿｽﾈゑｿｽ??ｿｽ?ｿｽﾆゑｿｽ??ｿｽ?ｿｽﾜゑｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾈゑｿｽ??ｿｽ?ｿｽH
    
    # pin??ｿｽ?ｿｽﾌ設抵ｿｽ
    pin_area = [0]
    for i in range(pin_area_num) :
        pin_area.append(len(area) - 1 - i )
    print "pin_area            :", pin_area
    
    u_index = []        #??ｿｽ?ｿｽ@??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾆゑｿｽ??ｿｽ?ｿｽﾆのイ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽf??ｿｽ?ｿｽb??ｿｽ?ｿｽN??ｿｽ?ｿｽX
    u_index_new = []    # ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾅゑｿｽpin??ｿｽ?ｿｽﾌイ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽf??ｿｽ?ｿｽb??ｿｽ?ｿｽN??ｿｽ?ｿｽX
    
    for i in pin_area :
        for p in area[i] :
            u_index.append( p )
            u_index_new.append( area_flat.index(p) )
    
    print "len of u_index      :", len(u_index)
    print "len of u_index_new  :", len(u_index_new)
    
    
    
    # ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽﾝ位置??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽmoves??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽv??ｿｽ?ｿｽZ
    if len(u_index) == 0 :
        print "ERROR"
        return -1
    # ??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽ[??ｿｽ?ｿｽ??ｿｽ?ｿｽ??ｿｽ?ｿｽh??ｿｽ?ｿｽﾅ渡??ｿｽ?ｿｽ??ｿｽ?ｿｽ
    moves = []
    for i in u_index :
        pos = pm.pointPosition( obj.vtx[i] )
        moves.append( list(pos) )    
    dict = {}
    dict["u_index"] = u_index_new
    dict["moves"]   = moves
    dict["lamda"]   = lamda
    dict["num_of_pin"] = len(u_index) 
    dict["mode"]    = "lap_limit"

    #[makeSphere(i) for i in moves]

    for i in range(8):
        print area[0][i], moves[i]
        tools.makeSphere(moves[i])
    

    #send = json.dumps(dict)
    w = tools.send_data(dict)
    print "len(Recieve) :", len(w), "??ｿｽ?ｿｽ??ｿｽ?ｿｽ vertex :", len(w)/3
    
    # ??ｿｽ?ｿｽﾚ難ｿｽ??ｿｽ?ｿｽﾊ置??ｿｽ?ｿｽ??ｿｽ?ｿｽK??ｿｽ?ｿｽp
    for i in range(len(area_flat)) :
        pm.move( obj.vtx[area_flat[i]], w[i*3],w[i*3+1],w[i*3+2] )
        
    
    for i in range(8):
        print area[0][i], [w[i*3],w[i*3+1],w[i*3+2]]
        tools.makeVector([w[i*3]-moves[i][0],w[i*3+1]-moves[i][0],w[i*3+2]-moves[i][0]], moves[i])
        tools.makeSphere([w[i*3],w[i*3+1],w[i*3+2]])

def get_index(pre) :
    global area
    area_flat = []
    for area_v in area :
        for area_p in area_v :
            area_flat.append(area_p)
    return( area_flat[pre] )
    
def highlight_pin(u_index_new) :
    global area
    area_flat = []
    for area_v in area :
        for area_p in area_v :
            area_flat.append(area_p)
            
    [pm.select(baseObj.vtx[area_flat[i]], add=1) for i in u_index_new]
            

"""    
# - - - - - MAIN - - - - - - - - - - -
path      = "C:/Users/piedp/OneDrive/Labo/Sketch/Script/BlendLap/limitLap/lap.json"
        
base_name = "base"

area      = serch_close_vertex( base_name, pinIndexList, 8 )

exp_vertex_pos_limit( base_name, path, area)

do_lap_limit(area, 1, curPosList, base_name )




for area_v in area :
    for area_p in area_v :
        pm.select(obj.vtx[area_p], tgl = 1)
area_flat = []
for area_v in area :
    for area_p in area_v :
        area_flat.append(area_p)
"""